// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coderbiq/dgo/base/devent (interfaces: EventBus)

// Package mocks is a generated GoMock package.
package mocks

import (
	devent "github.com/coderbiq/dgo/base/devent"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockEventBus is a mock of EventBus interface
type MockEventBus struct {
	ctrl     *gomock.Controller
	recorder *MockEventBusMockRecorder
}

// MockEventBusMockRecorder is the mock recorder for MockEventBus
type MockEventBusMockRecorder struct {
	mock *MockEventBus
}

// NewMockEventBus creates a new mock instance
func NewMockEventBus(ctrl *gomock.Controller) *MockEventBus {
	mock := &MockEventBus{ctrl: ctrl}
	mock.recorder = &MockEventBusMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEventBus) EXPECT() *MockEventBusMockRecorder {
	return m.recorder
}

// Listen mocks base method
func (m *MockEventBus) Listen(arg0 string, arg1 devent.EventConsumer) {
	m.ctrl.Call(m, "Listen", arg0, arg1)
}

// Listen indicates an expected call of Listen
func (mr *MockEventBusMockRecorder) Listen(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Listen", reflect.TypeOf((*MockEventBus)(nil).Listen), arg0, arg1)
}

// Publish mocks base method
func (m *MockEventBus) Publish(arg0 ...devent.DomainEvent) {
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Publish", varargs...)
}

// Publish indicates an expected call of Publish
func (mr *MockEventBusMockRecorder) Publish(arg0 ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockEventBus)(nil).Publish), arg0...)
}
