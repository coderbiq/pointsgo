// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coderbiq/dgo/base/devent (interfaces: Bus)

// Package mocks is a generated GoMock package.
package mocks

import (
	devent "github.com/coderbiq/dgo/base/devent"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockBus is a mock of Bus interface
type MockBus struct {
	ctrl     *gomock.Controller
	recorder *MockBusMockRecorder
}

// MockBusMockRecorder is the mock recorder for MockBus
type MockBusMockRecorder struct {
	mock *MockBus
}

// NewMockBus creates a new mock instance
func NewMockBus(ctrl *gomock.Controller) *MockBus {
	mock := &MockBus{ctrl: ctrl}
	mock.recorder = &MockBusMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBus) EXPECT() *MockBusMockRecorder {
	return m.recorder
}

// AddRouter mocks base method
func (m *MockBus) AddRouter(arg0 devent.Router) {
	m.ctrl.Call(m, "AddRouter", arg0)
}

// AddRouter indicates an expected call of AddRouter
func (mr *MockBusMockRecorder) AddRouter(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRouter", reflect.TypeOf((*MockBus)(nil).AddRouter), arg0)
}

// Publish mocks base method
func (m *MockBus) Publish(arg0 ...devent.Event) {
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Publish", varargs...)
}

// Publish indicates an expected call of Publish
func (mr *MockBusMockRecorder) Publish(arg0 ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockBus)(nil).Publish), arg0...)
}
