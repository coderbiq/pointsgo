// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coderbiq/pointsgo/base/internal/model (interfaces: AccountRepository,AccountLogStorer)

// Package mocks is a generated GoMock package.
package mocks

import (
	vo "github.com/coderbiq/dgo/base/vo"
	model "github.com/coderbiq/pointsgo/base/internal/model"
	common "github.com/coderbiq/pointsgo/common"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockAccountRepository is a mock of AccountRepository interface
type MockAccountRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAccountRepositoryMockRecorder
}

// MockAccountRepositoryMockRecorder is the mock recorder for MockAccountRepository
type MockAccountRepositoryMockRecorder struct {
	mock *MockAccountRepository
}

// NewMockAccountRepository creates a new mock instance
func NewMockAccountRepository(ctrl *gomock.Controller) *MockAccountRepository {
	mock := &MockAccountRepository{ctrl: ctrl}
	mock.recorder = &MockAccountRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAccountRepository) EXPECT() *MockAccountRepositoryMockRecorder {
	return m.recorder
}

// FindByOwner mocks base method
func (m *MockAccountRepository) FindByOwner(arg0 vo.LongID) ([]model.Account, error) {
	ret := m.ctrl.Call(m, "FindByOwner", arg0)
	ret0, _ := ret[0].([]model.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByOwner indicates an expected call of FindByOwner
func (mr *MockAccountRepositoryMockRecorder) FindByOwner(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByOwner", reflect.TypeOf((*MockAccountRepository)(nil).FindByOwner), arg0)
}

// Get mocks base method
func (m *MockAccountRepository) Get(arg0 vo.LongID) (model.Account, error) {
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(model.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockAccountRepositoryMockRecorder) Get(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAccountRepository)(nil).Get), arg0)
}

// Save mocks base method
func (m *MockAccountRepository) Save(arg0 model.Account) error {
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockAccountRepositoryMockRecorder) Save(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockAccountRepository)(nil).Save), arg0)
}

// MockAccountLogStorer is a mock of AccountLogStorer interface
type MockAccountLogStorer struct {
	ctrl     *gomock.Controller
	recorder *MockAccountLogStorerMockRecorder
}

// MockAccountLogStorerMockRecorder is the mock recorder for MockAccountLogStorer
type MockAccountLogStorerMockRecorder struct {
	mock *MockAccountLogStorer
}

// NewMockAccountLogStorer creates a new mock instance
func NewMockAccountLogStorer(ctrl *gomock.Controller) *MockAccountLogStorer {
	mock := &MockAccountLogStorer{ctrl: ctrl}
	mock.recorder = &MockAccountLogStorerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAccountLogStorer) EXPECT() *MockAccountLogStorerMockRecorder {
	return m.recorder
}

// Append mocks base method
func (m *MockAccountLogStorer) Append(arg0 common.AccountLog) {
	m.ctrl.Call(m, "Append", arg0)
}

// Append indicates an expected call of Append
func (mr *MockAccountLogStorerMockRecorder) Append(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Append", reflect.TypeOf((*MockAccountLogStorer)(nil).Append), arg0)
}

// Get mocks base method
func (m *MockAccountLogStorer) Get(arg0 vo.LongID) []common.AccountLog {
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].([]common.AccountLog)
	return ret0
}

// Get indicates an expected call of Get
func (mr *MockAccountLogStorerMockRecorder) Get(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAccountLogStorer)(nil).Get), arg0)
}
