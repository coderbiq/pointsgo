// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coderbiq/pointsgo/base/internal/service (interfaces: Infra,AppServices,RegisterService,DepositService,ConsumeService)

// Package mocks is a generated GoMock package.
package mocks

import (
	devent "github.com/coderbiq/dgo/base/devent"
	model "github.com/coderbiq/pointsgo/base/internal/model"
	service "github.com/coderbiq/pointsgo/base/internal/service"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockInfra is a mock of Infra interface
type MockInfra struct {
	ctrl     *gomock.Controller
	recorder *MockInfraMockRecorder
}

// MockInfraMockRecorder is the mock recorder for MockInfra
type MockInfraMockRecorder struct {
	mock *MockInfra
}

// NewMockInfra creates a new mock instance
func NewMockInfra(ctrl *gomock.Controller) *MockInfra {
	mock := &MockInfra{ctrl: ctrl}
	mock.recorder = &MockInfraMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInfra) EXPECT() *MockInfraMockRecorder {
	return m.recorder
}

// AccountRepo mocks base method
func (m *MockInfra) AccountRepo() model.AccountRepository {
	ret := m.ctrl.Call(m, "AccountRepo")
	ret0, _ := ret[0].(model.AccountRepository)
	return ret0
}

// AccountRepo indicates an expected call of AccountRepo
func (mr *MockInfraMockRecorder) AccountRepo() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountRepo", reflect.TypeOf((*MockInfra)(nil).AccountRepo))
}

// EventBus mocks base method
func (m *MockInfra) EventBus() devent.EventBus {
	ret := m.ctrl.Call(m, "EventBus")
	ret0, _ := ret[0].(devent.EventBus)
	return ret0
}

// EventBus indicates an expected call of EventBus
func (mr *MockInfraMockRecorder) EventBus() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventBus", reflect.TypeOf((*MockInfra)(nil).EventBus))
}

// MockAppServices is a mock of AppServices interface
type MockAppServices struct {
	ctrl     *gomock.Controller
	recorder *MockAppServicesMockRecorder
}

// MockAppServicesMockRecorder is the mock recorder for MockAppServices
type MockAppServicesMockRecorder struct {
	mock *MockAppServices
}

// NewMockAppServices creates a new mock instance
func NewMockAppServices(ctrl *gomock.Controller) *MockAppServices {
	mock := &MockAppServices{ctrl: ctrl}
	mock.recorder = &MockAppServicesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAppServices) EXPECT() *MockAppServicesMockRecorder {
	return m.recorder
}

// ConsumeApp mocks base method
func (m *MockAppServices) ConsumeApp() service.ConsumeService {
	ret := m.ctrl.Call(m, "ConsumeApp")
	ret0, _ := ret[0].(service.ConsumeService)
	return ret0
}

// ConsumeApp indicates an expected call of ConsumeApp
func (mr *MockAppServicesMockRecorder) ConsumeApp() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsumeApp", reflect.TypeOf((*MockAppServices)(nil).ConsumeApp))
}

// DepositApp mocks base method
func (m *MockAppServices) DepositApp() service.DepositService {
	ret := m.ctrl.Call(m, "DepositApp")
	ret0, _ := ret[0].(service.DepositService)
	return ret0
}

// DepositApp indicates an expected call of DepositApp
func (mr *MockAppServicesMockRecorder) DepositApp() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DepositApp", reflect.TypeOf((*MockAppServices)(nil).DepositApp))
}

// RegisterApp mocks base method
func (m *MockAppServices) RegisterApp() service.RegisterService {
	ret := m.ctrl.Call(m, "RegisterApp")
	ret0, _ := ret[0].(service.RegisterService)
	return ret0
}

// RegisterApp indicates an expected call of RegisterApp
func (mr *MockAppServicesMockRecorder) RegisterApp() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterApp", reflect.TypeOf((*MockAppServices)(nil).RegisterApp))
}

// MockRegisterService is a mock of RegisterService interface
type MockRegisterService struct {
	ctrl     *gomock.Controller
	recorder *MockRegisterServiceMockRecorder
}

// MockRegisterServiceMockRecorder is the mock recorder for MockRegisterService
type MockRegisterServiceMockRecorder struct {
	mock *MockRegisterService
}

// NewMockRegisterService creates a new mock instance
func NewMockRegisterService(ctrl *gomock.Controller) *MockRegisterService {
	mock := &MockRegisterService{ctrl: ctrl}
	mock.recorder = &MockRegisterServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRegisterService) EXPECT() *MockRegisterServiceMockRecorder {
	return m.recorder
}

// Register mocks base method
func (m *MockRegisterService) Register(arg0 string) (int64, error) {
	ret := m.ctrl.Call(m, "Register", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register
func (mr *MockRegisterServiceMockRecorder) Register(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockRegisterService)(nil).Register), arg0)
}

// MockDepositService is a mock of DepositService interface
type MockDepositService struct {
	ctrl     *gomock.Controller
	recorder *MockDepositServiceMockRecorder
}

// MockDepositServiceMockRecorder is the mock recorder for MockDepositService
type MockDepositServiceMockRecorder struct {
	mock *MockDepositService
}

// NewMockDepositService creates a new mock instance
func NewMockDepositService(ctrl *gomock.Controller) *MockDepositService {
	mock := &MockDepositService{ctrl: ctrl}
	mock.recorder = &MockDepositServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDepositService) EXPECT() *MockDepositServiceMockRecorder {
	return m.recorder
}

// Deposit mocks base method
func (m *MockDepositService) Deposit(arg0 int64, arg1 uint) (uint, uint, error) {
	ret := m.ctrl.Call(m, "Deposit", arg0, arg1)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(uint)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Deposit indicates an expected call of Deposit
func (mr *MockDepositServiceMockRecorder) Deposit(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deposit", reflect.TypeOf((*MockDepositService)(nil).Deposit), arg0, arg1)
}

// MockConsumeService is a mock of ConsumeService interface
type MockConsumeService struct {
	ctrl     *gomock.Controller
	recorder *MockConsumeServiceMockRecorder
}

// MockConsumeServiceMockRecorder is the mock recorder for MockConsumeService
type MockConsumeServiceMockRecorder struct {
	mock *MockConsumeService
}

// NewMockConsumeService creates a new mock instance
func NewMockConsumeService(ctrl *gomock.Controller) *MockConsumeService {
	mock := &MockConsumeService{ctrl: ctrl}
	mock.recorder = &MockConsumeServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConsumeService) EXPECT() *MockConsumeServiceMockRecorder {
	return m.recorder
}

// Consume mocks base method
func (m *MockConsumeService) Consume(arg0 int64, arg1 uint) (uint, uint, error) {
	ret := m.ctrl.Call(m, "Consume", arg0, arg1)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(uint)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Consume indicates an expected call of Consume
func (mr *MockConsumeServiceMockRecorder) Consume(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consume", reflect.TypeOf((*MockConsumeService)(nil).Consume), arg0, arg1)
}
