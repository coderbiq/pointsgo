// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coderbiq/dgo/model (interfaces: EventPublisher)

// Package mocks is a generated GoMock package.
package mocks

import (
	model "github.com/coderbiq/dgo/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockEventPublisher is a mock of EventPublisher interface
type MockEventPublisher struct {
	ctrl     *gomock.Controller
	recorder *MockEventPublisherMockRecorder
}

// MockEventPublisherMockRecorder is the mock recorder for MockEventPublisher
type MockEventPublisherMockRecorder struct {
	mock *MockEventPublisher
}

// NewMockEventPublisher creates a new mock instance
func NewMockEventPublisher(ctrl *gomock.Controller) *MockEventPublisher {
	mock := &MockEventPublisher{ctrl: ctrl}
	mock.recorder = &MockEventPublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEventPublisher) EXPECT() *MockEventPublisherMockRecorder {
	return m.recorder
}

// Publish mocks base method
func (m *MockEventPublisher) Publish(arg0 ...model.DomainEvent) {
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Publish", varargs...)
}

// Publish indicates an expected call of Publish
func (mr *MockEventPublisherMockRecorder) Publish(arg0 ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockEventPublisher)(nil).Publish), arg0...)
}
